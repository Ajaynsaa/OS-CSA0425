#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    int start_time;
    int completion_time;
    int waiting_time;
    int turnaround_time;
} Process;

int main() {
    int n, i, j, time, smallest;
    float avg_waiting_time = 0, avg_turnaround_time = 0;
    Process *processes;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    processes = (Process*)malloc(n * sizeof(Process));

    for (i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i+1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i+1;
        processes[i].remaining_time = processes[i].burst_time;
    }

    time = 0;

    while (1) {
        smallest = -1;
        for (i = 0; i < n; i++) {
            if (processes[i].arrival_time <= time && processes[i].remaining_time > 0) {
                if (smallest == -1 || processes[i].remaining_time < processes[smallest].remaining_time) {
                    smallest = i;
                }
            }
        }

        if (smallest == -1) {
            time++;
            continue;
        }

        processes[smallest].remaining_time--;

        if (processes[smallest].remaining_time == 0) {
            processes[smallest].completion_time = time + 1;
            processes[smallest].turnaround_time = processes[smallest].completion_time - processes[smallest].arrival_time;
            processes[smallest].waiting_time = processes[smallest].turnaround_time - processes[smallest].burst_time;

            avg_waiting_time += processes[smallest].waiting_time;
            avg_turnaround_time += processes[smallest].turnaround_time;
        }

        time++;
        if (time == processes[smallest].arrival_time + processes[smallest].burst_time) {
            processes[smallest].remaining_time = 0;
        }
    }

    avg_waiting_time /= n;
    avg_turnaround_time /= n;

    printf("PID\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time, processes[i].waiting_time);
    }

    printf("Average waiting time: %.2f\n", avg_waiting_time);
    printf("Average turnaround time: %.2f\n", avg_turnaround_time);

    return 0;
}
